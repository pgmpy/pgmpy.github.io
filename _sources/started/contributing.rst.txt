.. orphan::

Contributing to pgmpy
=====================

WelcomeÂ â€” and thanks for helping make **pgmpy** better!
Use the quick links below for common actions, then read the short guides that follow.

.. list-table::
   :header-rows: 0
   :widths: 33 67

   * - **ðŸ“„ Report a bug**
     - https://github.com/pgmpy/pgmpy/issues/new
   * - **ðŸ’¡ Propose a feature**
     - https://github.com/pgmpy/pgmpy/issues/new
   * - **ðŸ›   Open a pull request**
     - https://github.com/pgmpy/pgmpy/compare/

------------------------------------------------------------------------

1Â Â Development workflow
-----------------------

#. **Fork** `pgmpy/pgmpy` to your GitHub account.
#. **Clone** your fork:
   ``git clone git@github.com:<your_github_username>/pgmpy.git``
#. **Create a branch** fromÂ ``dev`` with a descriptive name, e.g.

   ``git checkout -b feature/bic-score``
#. Make small, focused commitsÂ (`git add <file>` âžœÂ `git commit -m "feat: add BIC score"`).
#. **Push** the branch and open a **pull request** againstÂ ``dev``.
#. Address review comments; when approved, weÂ merge.

*We follow theÂ `GitÂ Flow <https://nvie.com/posts/a-successful-git-branching-model/>` convention; nothing lands directly onÂ ``dev`` without a PR.*

------------------------------------------------------------------------

2Â Â Code style & quality
-----------------------

* We have a pre-commit hook in the repository to automatically test code style. You can install it by running ``pre-commit install`` from the pgmpy directory.

------------------------------------------------------------------------

3Â Â Testing
----------

* Write **pytest** tests for every new feature or bugâ€‘fix.
* Run the full suite locally: ``pytest -q``.
  The **dev** branch must stay green at all times.
* Continuous integration runs on **GitHubÂ Actions**; your PR must pass before merge.

> **Tip:** try *testâ€‘driven development* â€” write the failing test first, then code until it passes.

------------------------------------------------------------------------

4Â Â Commit & PR etiquette
------------------------

* Make each commit atomic and write an informative message
  (`type: short imperative summary`, e.g. `fix: guard zeroâ€‘division in score.py`).
* Never use ``git add .`` â€“ stage only the files you intend to commit.
* Run ``git diff`` (unstaged) and ``git diff --cached`` (staged) before every commit.
* Reference related issues in your PR description (`ClosesÂ #123`).

------------------------------------------------------------------------

5Â Â Communication channels
-------------------------

* **Issues & Pull Requests** â€“ primary place for technical discussion.
* **Discord** â€“ quick questions and chat: https://discord.gg/DRkdKaumBs
* **Mailing list** â€“ pgmpy@googlegroups.com (longâ€‘form design topics).

Weâ€™re friendly and responsiveâ€”donâ€™t hesitate to ask questions.

------------------------------------------------------------------------

Happy hackingÂ ðŸš€
